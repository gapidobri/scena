generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id String @id

  username String  @unique @default(cuid())
  admin    Boolean @default(false)

  ratings          Rating[]
  videos           Video[]
  uploadAccessUrls UploadAccessUrl[]
  comments         Comment[]
  playlists        Playlist[]
  history          VideoView[]
  commentLikes     CommentLike[]

  profilePicture   Upload? @relation(fields: [profilePictureId], references: [id], name: "profilePicture")
  profilePictureId String? @unique

  banner   Upload? @relation(fields: [bannerId], references: [id], name: "banner")
  bannerId String? @unique

  subscribers   Subscription[] @relation(name: "subscribed")
  subscriptions Subscription[] @relation(name: "subscriber")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Video {
  id String @id @default(cuid())

  title       String?
  description String?
  published   Boolean @default(false)

  ratings   Rating[]
  comments  Comment[]
  playlists PlaylistVideo[]

  views VideoView[]

  videoFile   Upload? @relation(fields: [videoFileId], references: [id], name: "video")
  videoFileId String? @unique

  thumbnail   Upload? @relation(fields: [thumbnailId], references: [id], name: "thumbnail")
  thumbnailId String? @unique

  hlsUrl String?

  transcodeJob TranscodeJob? @relation(name: "transcodeJob")

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum RatingType {
  like
  dislike
}

model Rating {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoId String

  type RatingType

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([userId, videoId])
}

model Upload {
  id  String @id @default(cuid())
  key String @unique

  url String? @unique

  video          Video?    @relation(name: "video")
  thumbnail      Video?    @relation(name: "thumbnail")
  profilePicture User?     @relation(name: "profilePicture")
  banner         User?     @relation(name: "banner")
  playlist       Playlist?

  uploadAccessUrl UploadAccessUrl[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model UploadAccessUrl {
  url            String
  expirationDate DateTime

  upload   Upload @relation(fields: [uploadId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  uploadId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([uploadId, userId])
}

model Comment {
  id String @id @default(cuid())

  message String
  likes   CommentLike[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model CommentLike {
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@id([commentId, userId])
}

model Subscription {
  subscribed   User   @relation(fields: [subscribedId], references: [id], name: "subscribed", onDelete: Cascade, onUpdate: Cascade)
  subscribedId String

  subscriber   User   @relation(fields: [subscriberId], references: [id], name: "subscriber", onDelete: Cascade, onUpdate: Cascade)
  subscriberId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([subscribedId, subscriberId])
}

model Playlist {
  id String @id @default(cuid())

  title       String
  description String?

  thumbnail   Upload? @relation(fields: [thumbnailId], references: [id])
  thumbnailId String? @unique

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  public Boolean @default(false)

  videos PlaylistVideo[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model PlaylistVideo {
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  playlistId String

  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoId String

  displaySeq Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([playlistId, videoId])
}

model VideoView {
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([videoId, userId])
}

enum TranscodeJobStatus {
  pending
  processing
  complete
  error
}

model TranscodeJob {
  id String @id @default(cuid())

  video   Video?  @relation(fields: [videoId], references: [id], name: "transcodeJob", onDelete: Cascade, onUpdate: Cascade)
  videoId String? @unique

  status TranscodeJobStatus @default(pending)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
