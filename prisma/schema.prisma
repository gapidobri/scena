generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  username String @unique

  ratings          Rating[]
  videos           Video[]
  uploadAccessUrls UploadAccessUrl[]
  comments         Comment[]

  subscribers   Subscription[] @relation(name: "subscribed")
  subscriptions Subscription[] @relation(name: "subscriber")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Video {
  id String @id @default(uuid())

  title       String?
  description String?
  published   Boolean @default(false)

  ratings  Rating[]
  comments Comment[]

  videoFile   Upload? @relation(fields: [videoFileId], references: [id], name: "video")
  videoFileId String? @unique

  thumbnailFile   Upload? @relation(fields: [thumbnailFileId], references: [id], name: "thumbnail")
  thumbnailFileId String? @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum RatingType {
  like
  dislike
}

model Rating {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoId String

  type RatingType

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([userId, videoId])
}

model Upload {
  id  String @id
  key String @unique

  url String? @unique

  video     Video? @relation(name: "video")
  thumbnail Video? @relation(name: "thumbnail")

  uploadAccessUrl UploadAccessUrl[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model UploadAccessUrl {
  url            String
  expirationDate DateTime

  upload   Upload @relation(fields: [uploadId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  uploadId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([uploadId, userId])
}

model Comment {
  id String @id @default(uuid())

  message String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Subscription {
  subscribed   User   @relation(fields: [subscribedId], references: [id], name: "subscribed", onDelete: Cascade, onUpdate: Cascade)
  subscribedId String

  subscriber   User   @relation(fields: [subscriberId], references: [id], name: "subscriber", onDelete: Cascade, onUpdate: Cascade)
  subscriberId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([subscribedId, subscriberId])
}
